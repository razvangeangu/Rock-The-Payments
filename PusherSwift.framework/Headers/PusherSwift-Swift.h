// Generated by Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class PusherChannel;
@class NSMutableURLRequest;

SWIFT_PROTOCOL("_TtP11PusherSwift26AuthRequestBuilderProtocol_")
@protocol AuthRequestBuilderProtocol
- (NSMutableURLRequest * _Nullable)requestForSocketID:(NSString * _Nonnull)socketID channel:(PusherChannel * _Nonnull)channel;
@end

typedef SWIFT_ENUM(NSInteger, ConnectionState) {
  ConnectionStateConnecting = 0,
  ConnectionStateConnected = 1,
  ConnectionStateDisconnecting = 2,
  ConnectionStateDisconnected = 3,
  ConnectionStateReconnecting = 4,
  ConnectionStateReconnectingWhenNetworkBecomesReachable = 5,
};

@class PusherConnection;

SWIFT_CLASS("_TtC11PusherSwift13PusherChannel")
@interface PusherChannel : NSObject
@property (nonatomic) BOOL subscribed;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) PusherConnection * _Nonnull connection;
/**
  Initializes a new PusherChannel with a given name and conenction
  \param name The name of the channel

  \param connection The connection that this channel is relevant to


  returns:
  A new PusherChannel instance
*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name connection:(PusherConnection * _Nonnull)connection OBJC_DESIGNATED_INITIALIZER;
/**
  Binds a callback to a given event name, scoped to the PusherChannel the function is
  called on
  \param eventName The name of the event to bind to

  \param callback The function to call when a message is received with the relevant
  channel and event names


  returns:
  A unique callbackId that can be used to unbind the callback at a later time
*/
- (NSString * _Nonnull)bindWithEventName:(NSString * _Nonnull)eventName callback:(void (^ _Nonnull)(id _Nullable))callback;
/**
  Unbinds the callback with the given callbackId from the given eventName, in the scope
  of the channel being acted upon
  \param eventName The name of the event from which to unbind

  \param callbackId The unique callbackId string used to identify which callback to unbind

*/
- (void)unbindWithEventName:(NSString * _Nonnull)eventName callbackId:(NSString * _Nonnull)callbackId;
/**
  Unbinds all callbacks from the channel
*/
- (void)unbindAll;
/**
  Unbinds all callbacks for the given eventName from the channel
  \param eventName The name of the event from which to unbind

*/
- (void)unbindAllForEventName:(NSString * _Nonnull)eventName;
/**
  Calls the appropriate callbacks for the given eventName in the scope of the acted upon channel
  \param name The name of the received event

  \param data The data associated with the received message

*/
- (void)handleEventWithName:(NSString * _Nonnull)name data:(NSString * _Nonnull)data;
/**
  If subscribed, immediately call the connection to trigger a client event with the given
  eventName and data, otherwise queue it up to be triggered upon successful subscription
  \param eventName The name of the event to trigger

  \param data The data to be sent as the message payload

*/
- (void)triggerWithEventName:(NSString * _Nonnull)eventName data:(id _Nonnull)data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC11PusherSwift13GlobalChannel")
@interface GlobalChannel : PusherChannel
/**
  Unbinds all callbacks from the channel
*/
- (void)unbindAll;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name connection:(PusherConnection * _Nonnull)connection SWIFT_UNAVAILABLE;
@end

@class NSURLSession;

/**
  An interface to Pusher’s native push notification service.
  The service is a pub-sub system for push notifications.
  Notifications are published to “interests”.
  Clients (such as this app instance) subscribe to those interests.
  A per-app singleton of NativePusher is available via an instance of Pusher.
  Use the Pusher.nativePusher() method to get access to it.
*/
SWIFT_CLASS("_TtC11PusherSwift12NativePusher")
@interface NativePusher : NSObject
@property (nonatomic, strong) NSURLSession * _Nonnull URLSession;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Sets the pusherAppKey property and then attempts to flush
  the outbox of any pending requests
  \param pusherAppKey The Pusher app key

*/
- (void)setPusherAppKeyWithPusherAppKey:(NSString * _Nonnull)pusherAppKey;
/**
  Registers (asynchronously) this app instance with Pusher for push notifications.
  This must be done before we can subscribe to interests.
  \param deviceToken the deviceToken received when registering
  to receive push notifications, as Data

*/
- (void)registerWithDeviceToken:(NSData * _Nonnull)deviceToken;
/**
  Subscribe to an interest with Pusher’s Push Notification Service
  \param interestName the name of the interest you want to subscribe to

*/
- (void)subscribeWithInterestName:(NSString * _Nonnull)interestName;
/**
  Unsubscribe from an interest with Pusher’s Push Notification Service
  \param interestName the name of the interest you want to unsubscribe
  from

*/
- (void)unsubscribeWithInterestName:(NSString * _Nonnull)interestName;
@end


SWIFT_CLASS("_TtC11PusherSwift12OCAuthMethod")
@interface OCAuthMethod : NSObject
- (nonnull instancetype)initWithType:(NSInteger)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAuthEndpoint:(NSString * _Nonnull)authEndpoint OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAuthRequestBuilder:(id <AuthRequestBuilderProtocol> _Nonnull)authRequestBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSecret:(NSString * _Nonnull)secret OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC11PusherSwift12OCPusherHost")
@interface OCPusherHost : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHost:(NSString * _Nonnull)host OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCluster:(NSString * _Nonnull)cluster OBJC_DESIGNATED_INITIALIZER;
@end

@class PusherClientOptions;
@class PusherPresenceChannelMember;
@class PusherPresenceChannel;
@protocol PusherDelegate;

SWIFT_CLASS("_TtC11PusherSwift6Pusher")
@interface Pusher : NSObject
@property (nonatomic, readonly, strong) PusherConnection * _Nonnull connection;
@property (nonatomic, weak) id <PusherDelegate> _Nullable delegate;
/**
  Initializes the Pusher client with an app key and any appropriate options.
  \param key The Pusher app key

  \param options An optional collection of options


  returns:
  A new Pusher client instance
*/
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key options:(PusherClientOptions * _Nonnull)options nativePusher:(NativePusher * _Nonnull)nativePusher OBJC_DESIGNATED_INITIALIZER;
/**
  Subscribes the client to a new channel
  \param channelName The name of the channel to subscribe to

  \param onMemberAdded A function that will be called with information about the
  member who has just joined the presence channel

  \param onMemberRemoved A function that will be called with information about the
  member who has just left the presence channel


  returns:
  A new PusherChannel instance
*/
- (PusherChannel * _Nonnull)subscribe:(NSString * _Nonnull)channelName onMemberAdded:(void (^ _Nullable)(PusherPresenceChannelMember * _Nonnull))onMemberAdded onMemberRemoved:(void (^ _Nullable)(PusherPresenceChannelMember * _Nonnull))onMemberRemoved;
/**
  Subscribes the client to a new presence channel. Use this instead of the subscribe
  function when you want a presence channel object to be returned instead of just a
  generic channel object (which you can then cast)
  \param channelName The name of the channel to subscribe to

  \param onMemberAdded A function that will be called with information about the
  member who has just joined the presence channel

  \param onMemberRemoved A function that will be called with information about the
  member who has just left the presence channel


  returns:
  A new PusherPresenceChannel instance
*/
- (PusherPresenceChannel * _Nonnull)subscribeToPresenceChannelWithChannelName:(NSString * _Nonnull)channelName onMemberAdded:(void (^ _Nullable)(PusherPresenceChannelMember * _Nonnull))onMemberAdded onMemberRemoved:(void (^ _Nullable)(PusherPresenceChannelMember * _Nonnull))onMemberRemoved;
/**
  Unsubscribes the client from a given channel
  \param channelName The name of the channel to unsubscribe from

*/
- (void)unsubscribe:(NSString * _Nonnull)channelName;
/**
  Binds the client’s global channel to all events
  \param callback The function to call when a new event is received


  returns:
  A unique string that can be used to unbind the callback from the client
*/
- (NSString * _Nonnull)bind:(void (^ _Nonnull)(id _Nullable))callback;
/**
  Unbinds the client from its global channel
  \param callbackId The unique callbackId string used to identify which callback to unbind

*/
- (void)unbindWithCallbackId:(NSString * _Nonnull)callbackId;
/**
  Unbinds the client from all global callbacks
*/
- (void)unbindAll;
/**
  Disconnects the client’s connection
*/
- (void)disconnect;
/**
  Initiates a connection attempt using the client’s existing connection details
*/
- (void)connect;
/**
  Returns the NativePusher singletion

  returns:
  The NativePusher singleton
*/
- (NativePusher * _Nonnull)nativePusher;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface Pusher (SWIFT_EXTENSION(PusherSwift))
- (PusherChannel * _Nonnull)subscribeWithChannelName:(NSString * _Nonnull)channelName;
- (PusherPresenceChannel * _Nonnull)subscribeToPresenceChannelWithChannelName:(NSString * _Nonnull)channelName;
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)key options:(PusherClientOptions * _Nonnull)options;
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key;
@end



SWIFT_CLASS("_TtC11PusherSwift14PusherChannels")
@interface PusherChannels : NSObject
@property (nonatomic, copy) NSDictionary<NSString *, PusherChannel *> * _Nonnull channels;
/**
  Return the PusherChannel with the given channelName from the channels list, if it exists
  \param name The name of the channel to return


  returns:
  A PusherChannel instance, if a channel with the given name existed, otherwise nil
*/
- (PusherChannel * _Nullable)findWithName:(NSString * _Nonnull)name;
/**
  Return the PusherPresenceChannel with the given channelName from the channels list, if it exists
  \param name The name of the presence channel to return


  returns:
  A PusherPresenceChannel instance, if a channel with the given name existed,
  otherwise nil
*/
- (PusherPresenceChannel * _Nullable)findPresenceWithName:(NSString * _Nonnull)name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11PusherSwift19PusherClientOptions")
@interface PusherClientOptions : NSObject
@property (nonatomic, readonly) BOOL attemptToReturnJSONObject;
@property (nonatomic, readonly) BOOL autoReconnect;
@property (nonatomic, readonly, copy) NSString * _Nonnull host;
@property (nonatomic, readonly) NSInteger port;
@property (nonatomic, readonly) BOOL encrypted;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSNumber;

@interface PusherClientOptions (SWIFT_EXTENSION(PusherSwift))
- (nonnull instancetype)initWithOcAuthMethod:(OCAuthMethod * _Nonnull)authMethod attemptToReturnJSONObject:(BOOL)attemptToReturnJSONObject autoReconnect:(BOOL)autoReconnect ocHost:(OCPusherHost * _Nonnull)host port:(NSNumber * _Nullable)port encrypted:(BOOL)encrypted;
- (nonnull instancetype)initWithAuthMethod:(OCAuthMethod * _Nonnull)authMethod;
- (void)setAuthMethodWithAuthMethod:(OCAuthMethod * _Nonnull)authMethod;
@end

@class WebSocket;
@protocol PusherConnectionDelegate;

SWIFT_CLASS("_TtC11PusherSwift16PusherConnection")
@interface PusherConnection : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, strong) PusherClientOptions * _Nonnull options;
@property (nonatomic, strong) GlobalChannel * _Null_unspecified globalChannel;
@property (nonatomic, copy) NSString * _Nullable socketId;
@property (nonatomic) enum ConnectionState connectionState;
@property (nonatomic, strong) PusherChannels * _Nonnull channels;
@property (nonatomic, strong) WebSocket * _Null_unspecified socket;
@property (nonatomic, strong) NSURLSession * _Nonnull URLSession;
@property (nonatomic, copy) PusherPresenceChannelMember * _Nonnull (^ _Nullable userDataFetcher)(void);
@property (nonatomic) NSInteger reconnectAttempts;
@property (nonatomic, weak) id <PusherConnectionDelegate> _Nullable delegate;
/**
  Initializes a new PusherConnection with an app key, websocket, URL, options and URLSession
  \param key The Pusher app key

  \param socket The websocket object

  \param url The URL the connection is made to

  \param options A PusherClientOptions instance containing all of the user-speficied
  client options

  \param URLSession An NSURLSession instance for the connection to use for making
  authentication requests


  returns:
  A new PusherConnection instance
*/
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key socket:(WebSocket * _Nonnull)socket url:(NSString * _Nonnull)url options:(PusherClientOptions * _Nonnull)options URLSession:(NSURLSession * _Nonnull)URLSession OBJC_DESIGNATED_INITIALIZER;
/**
  Either writes a string directly to the websocket with the given event name
  and data, or calls a client event to be sent if the event is prefixed with
  “client”
  \param event The name of the event

  \param data The data to be stringified and sent

  \param channelName The name of the channel

*/
- (void)sendEventWithEvent:(NSString * _Nonnull)event data:(id _Nonnull)data channel:(PusherChannel * _Nullable)channel;
/**
  Disconnects the websocket
*/
- (void)disconnect;
/**
  Establish a websocket connection
*/
- (void)connect;
/**
  Parse a string to extract Pusher event information from it
  \param string The string received over the websocket connection containing
  Pusher event information


  returns:
  A dictionary of Pusher-relevant event data
*/
- (NSDictionary<NSString *, id> * _Nullable)getPusherEventJSONFrom:(NSString * _Nonnull)string;
/**
  Parse a string to extract Pusher event data from it
  \param string The data string received as part of a Pusher message


  returns:
  The object sent as the payload part of the Pusher message
*/
- (id _Nonnull)getEventDataJSONFrom:(NSString * _Nonnull)string;
/**
  Handles incoming events and passes them on to be handled by the appropriate function
  \param eventName The name of the incoming event

  \param jsonObject The event-specific data related to the incoming event

*/
- (void)handleEventWithEventName:(NSString * _Nonnull)eventName jsonObject:(NSDictionary<NSString *, id> * _Nonnull)jsonObject;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSError;

@interface PusherConnection (SWIFT_EXTENSION(PusherSwift))
/**
  Delegate method called when a message is received over a websocket
  \param ws The websocket that has received the message

  \param text The message received over the websocket

*/
- (void)websocketDidReceiveMessage:(WebSocket * _Nonnull)ws text:(NSString * _Nonnull)text;
/**
  Delegate method called when a websocket disconnected
  \param ws The websocket that disconnected

  \param error The error, if one exists, when disconnected

*/
- (void)websocketDidDisconnect:(WebSocket * _Nonnull)ws error:(NSError * _Nullable)error;
- (void)websocketDidConnect:(WebSocket * _Nonnull)ws;
- (void)websocketDidReceiveData:(WebSocket * _Nonnull)ws data:(NSData * _Nonnull)data;
@end

@class NSURLResponse;

SWIFT_PROTOCOL("_TtP11PusherSwift24PusherConnectionDelegate_")
@protocol PusherConnectionDelegate
@optional
- (void)connectionStateDidChangeFrom:(enum ConnectionState)old to:(enum ConnectionState)new_;
- (void)debugLogWithMessage:(NSString * _Nonnull)message;
- (void)subscriptionDidSucceedWithChannelName:(NSString * _Nonnull)channelName;
- (void)subscriptionDidFailWithChannelName:(NSString * _Nonnull)channelName response:(NSURLResponse * _Nullable)response data:(NSString * _Nullable)data error:(NSError * _Nullable)error;
@end


SWIFT_PROTOCOL("_TtP11PusherSwift14PusherDelegate_")
@protocol PusherDelegate
@optional
- (void)didRegisterForPushNotificationsWithClientId:(NSString * _Nonnull)clientId;
- (void)didSubscribeToInterestWithNamed:(NSString * _Nonnull)name;
- (void)didUnsubscribeFromInterestWithNamed:(NSString * _Nonnull)name;
@end


SWIFT_CLASS("_TtC11PusherSwift21PusherPresenceChannel")
@interface PusherPresenceChannel : PusherChannel
@property (nonatomic, copy) NSArray<PusherPresenceChannelMember *> * _Nonnull members;
@property (nonatomic, copy) void (^ _Nullable onMemberAdded)(PusherPresenceChannelMember * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable onMemberRemoved)(PusherPresenceChannelMember * _Nonnull);
@property (nonatomic, copy) NSString * _Nullable myId;
/**
  Returns the PusherPresenceChannelMember object for the given user id
  \param userId The user id of the PusherPresenceChannelMember for whom you want
  the PusherPresenceChannelMember object


  returns:
  The PusherPresenceChannelMember object for the given user id
*/
- (PusherPresenceChannelMember * _Nullable)findMemberWithUserId:(NSString * _Nonnull)userId;
/**
  Returns the connected user’s PusherPresenceChannelMember object

  returns:
  The connected user’s PusherPresenceChannelMember object
*/
- (PusherPresenceChannelMember * _Nullable)me;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name connection:(PusherConnection * _Nonnull)connection SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC11PusherSwift27PusherPresenceChannelMember")
@interface PusherPresenceChannelMember : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly) id _Nullable userInfo;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId userInfo:(id _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class OS_dispatch_queue;
@class NSStream;

SWIFT_CLASS("_TtC11PusherSwift9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain;
@property (nonatomic, strong) OS_dispatch_queue * _Nonnull callbackQueue;
@property (nonatomic, copy) void (^ _Nullable onConnect)(void);
@property (nonatomic, copy) void (^ _Nullable onDisconnect)(NSError * _Nullable);
@property (nonatomic, copy) void (^ _Nullable onText)(NSString * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable onData)(NSData * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable onPong)(void);
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers;
@property (nonatomic) BOOL voipEnabled;
@property (nonatomic) BOOL selfSignedSSL;
@property (nonatomic, copy) NSString * _Nullable origin;
@property (nonatomic) NSInteger timeout;
@property (nonatomic, readonly) BOOL isConnected;
@property (nonatomic, readonly, copy) NSURL * _Nonnull currentURL;
/**
  Used for setting protocols.
*/
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url protocols:(NSArray<NSString *> * _Nullable)protocols OBJC_DESIGNATED_INITIALIZER;
/**
  Connect to the WebSocket server on a background thread.
*/
- (void)connect;
/**
  Write a string to the websocket. This sends it as a text frame.
  If you supply a non-nil completion block, I will perform it when the write completes.
  \param str The string to write.

  \param completion The (optional) completion handler.

*/
- (void)writeWithString:(NSString * _Nonnull)string completion:(void (^ _Nullable)(void))completion;
/**
  Write binary data to the websocket. This sends it as a binary frame.
  If you supply a non-nil completion block, I will perform it when the write completes.
  \param data The data to write.

  \param completion The (optional) completion handler.

*/
- (void)writeWithData:(NSData * _Nonnull)data completion:(void (^ _Nullable)(void))completion;
- (void)write:(NSData * _Nonnull)ping completion:(void (^ _Nullable)(void))completion;
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
